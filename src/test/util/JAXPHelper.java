/*
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the "License").  You may not use this file except
 * in compliance with the License.
 *
 * You can obtain a copy of the license at
 * https://jwsdp.dev.java.net/CDDLv1.0.html
 * See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * HEADER in each file and include the License file at
 * https://jwsdp.dev.java.net/CDDLv1.0.html  If applicable,
 * add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your
 * own identifying information: Portions Copyright [yyyy]
 * [name of copyright owner]
 */
/*
 * $Id: JAXPHelper.java,v 1.1.1.1 2006-01-27 13:11:01 kumarjayanti Exp $
 */

/*
 * Copyright 2004 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/**
*
* @author JAX-RPC RI Development Team
*/
package util;

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;

import org.w3c.dom.Document;
import org.xml.sax.SAXParseException;

public class JAXPHelper {
    private static DocumentBuilder builder;
    private static Transformer transformer;

    static {
        DocumentBuilderFactory factory =
            new com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl();
        try {
            builder = factory.newDocumentBuilder();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            // Create an instance of our own transformer factory impl
            TransformerFactory transFactory =
                new com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl();

            // create Transformer
            transformer = transFactory.newTransformer();

        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser     
            System.out.println("* Transformer Factory error");
            System.out.println("  " + tce.getMessage());

            // Use the contained exception, if any      
            Throwable x = tce;
            if (tce.getException() != null)
                x = tce.getException();
            x.printStackTrace();

        }
    }

    public static Source readXMLFile(String xmlFileName) {

        Source domSource = null;

        try {
            Document domDoc = builder.parse(new File(xmlFileName));
            domSource = new javax.xml.transform.dom.DOMSource(domDoc);

        } catch (SAXParseException spe) {
            // Error generated by the parser    
            System.out.println(
                "\n** Parsing error"
                    + ", line "
                    + spe.getLineNumber()
                    + ", uri "
                    + spe.getSystemId());
            System.out.println("  " + spe.getMessage());

            // Use the contained exception, if any  
            Exception x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            x.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return domSource;
    }
}
